clear all;
i = sqrt(-1);

% DEMO FOR Jan25_TLSMPM1995 (EMFIDES github)


% 1) generates signal (artificial)
% 2) plot signal generated
% 3) run mpm
% 4) store mpm output values (estimates)
% 5) reconstruct signal from mpm output values (estimates)
% 6) Graph reconstructed, filtered MPM signal next to original signal (artificial)


%% 

% Artificial (sum of sinusoids) (all with 5 poles total):

signal_angfreq = 2*pi*[0.1 0.3 0.4+0.005i 0.2 0.1+0.002i]; %% freq.s multiplied by 2pi --> angular frequencies of signal
signal_amp = [1 -0.5 0.2 -0.3 0.01]; %% amplitdues in spectra
signal_length = 100; %% (N) length of signal (points)
noise_level = 1e-3; %% noise level

signal = signal_amp*exp(i*(signal_angfreq.')*[0:signal_length-1]); %% signal = sum of periodic functions
% complex conjugate (') taken on the angular freq.
% (* 0....N-1) = *k


% adding randomized noise to sing AFTER sum using randomized array of 100 values (same as N)

signal = signal + noise_level*rand(1,signal_length);

% plotting the generated signal

plot(real(signal))

%% 

% Running MPM on generated signal & Storring Values.


[freq,T,amp,alpha]=Jan25_TLSMPM1995(signal,4); %% matrix pencil method 


% we print the frequncies and amplitudies in signal
% both given on beginning and found by matrix pencil 
%%method (sorted by abs(amplitiude))
disp('--freq and amp in signal---')
[absamp,indx]=sort(abs(signal_amp),'DESCEND');
disp(signal_angfreq(indx(1:length(signal_angfreq))));
disp(signal_amp(indx(1:length(signal_angfreq))));

disp('--freq and amp found by MP method---')
[absamp,indx]=sort(abs(amp),'DESCEND');
disp(freq(indx(1:length(freq)))');
disp(amp(indx(1:length(freq)))');
